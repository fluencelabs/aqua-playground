/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.2-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


function missingFields(obj: any, fields: string[]): string[] {
    return fields.filter(f => !(f in obj))
}

// Services

export interface DTGetterDef {
    get_dt: (s: string, callParams: CallParams<'s'>) => { field: string; };
}
export function registerDTGetter(service: DTGetterDef): void;
export function registerDTGetter(serviceId: string, service: DTGetterDef): void;
export function registerDTGetter(peer: FluencePeer, service: DTGetterDef): void;
export function registerDTGetter(peer: FluencePeer, serviceId: string, service: DTGetterDef): void;
       

export function registerDTGetter(...args: any) {
    let peer: FluencePeer;
    let serviceId: any;
    let service: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = "get-dt"
    }

    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    const incorrectServiceDefinitions = missingFields(service, ['get_dt']);
    if (!!incorrectServiceDefinitions.length) {
        throw new Error("Error registering service DTGetter: missing functions: " + incorrectServiceDefinitions.map((d) => "'" + d + "'").join(", "))
    }

    peer.internals.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'get_dt') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    s: req.tetraplets[0]
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.get_dt(req.args[0], callParams)
        }

        next();
    });
}
      
// Functions
 

export function use_name1(name: string, config?: {ttl?: number}): Promise<string>;
export function use_name1(peer: FluencePeer, name: string, config?: {ttl?: number}): Promise<string>;
export function use_name1(...args: any) {
    let peer: FluencePeer;
    let name: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        name = args[1];
        config = args[2];
    } else {
        peer = Fluence.getPeer();
        name = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<string>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "name") [] name)
                       )
                       (call %init_peer_id% ("get-dt" "get_dt") [name] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results.$.field!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'name', () => {return name;});
                    h.onEvent('callbackSrv', 'response', (args) => {
                        const [res] = args;
                        resolve(res);
                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for use_name1');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}

 

export function use_name2(name: string, config?: {ttl?: number}): Promise<string[]>;
export function use_name2(peer: FluencePeer, name: string, config?: {ttl?: number}): Promise<string[]>;
export function use_name2(...args: any) {
    let peer: FluencePeer;
    let name: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        name = args[1];
        config = args[2];
    } else {
        peer = Fluence.getPeer();
        name = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (call %init_peer_id% ("getDataSrv" "name") [] name)
                            )
                            (call %init_peer_id% ("get-dt" "get_dt") [name] results0)
                           )
                           (ap results0.$.field! $results)
                          )
                          (call %init_peer_id% ("get-dt" "get_dt") [name] results1)
                         )
                         (ap results1.$.field! $results)
                        )
                        (call %init_peer_id% ("get-dt" "get_dt") [name] results2)
                       )
                       (ap results2.$.field! $results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [$results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'name', () => {return name;});
                    h.onEvent('callbackSrv', 'response', (args) => {
                        const [res] = args;
                        resolve(res);
                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for use_name2');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
