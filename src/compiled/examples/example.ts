/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-SNAPSHOT
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services

 export interface PeerDef {
     is_connected: (arg0: string, callParams: CallParams<'arg0'>) => Promise<boolean> | boolean;
 }

 export function registerPeer(service: PeerDef): void;
export function registerPeer(serviceId: string, service: PeerDef): void;
export function registerPeer(peer: FluencePeer, service: PeerDef): void;
export function registerPeer(peer: FluencePeer, serviceId: string, service: PeerDef): void;
 export function registerPeer(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "peer"
}

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use(async (req, resp, next) => {
          if (req.serviceId !== serviceId) {
              await next();
              return;
          }
  
          
 if (req.fnName === 'is_connected') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         arg0: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = await service.is_connected(req.args[0], callParams)

 }
    
  
          await next();
      });
 }
      


 export interface OpDef {
     identity: (callParams: CallParams<null>) => Promise<void> | void;
 }

 export function registerOp(service: OpDef): void;
export function registerOp(serviceId: string, service: OpDef): void;
export function registerOp(peer: FluencePeer, service: OpDef): void;
export function registerOp(peer: FluencePeer, serviceId: string, service: OpDef): void;
 export function registerOp(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "op"
}

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use(async (req, resp, next) => {
          if (req.serviceId !== serviceId) {
              await next();
              return;
          }
  
          
 if (req.fnName === 'identity') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         
     },
 };
 resp.retCode = ResultCodes.success;
 await service.identity(callParams); resp.result = {}

 }
    
  
          await next();
      });
 }
      


 export interface TestDef {
     doSomething: (callParams: CallParams<null>) => Promise<boolean> | boolean;
getUserList: (callParams: CallParams<null>) => Promise<{name:string;peer_id:string;relay_id:string}[]> | {name:string;peer_id:string;relay_id:string}[];
 }

 export function registerTest(service: TestDef): void;
export function registerTest(serviceId: string, service: TestDef): void;
export function registerTest(peer: FluencePeer, service: TestDef): void;
export function registerTest(peer: FluencePeer, serviceId: string, service: TestDef): void;
 export function registerTest(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "test"
}

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use(async (req, resp, next) => {
          if (req.serviceId !== serviceId) {
              await next();
              return;
          }
  
          
 if (req.fnName === 'doSomething') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = await service.doSomething(callParams)

 }
    


 if (req.fnName === 'getUserList') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = await service.getUserList(callParams)

 }
    
  
          await next();
      });
 }
      

// Functions

 export async function betterMessage(relay: string, config?: {ttl?: number}) : Promise<void>;
 export async function betterMessage(peer: FluencePeer, relay: string, config?: {ttl?: number}) : Promise<void>;
 export async function betterMessage(...args) {
     let peer: FluencePeer;
     let relay;
     let config;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         relay = args[1];
config = args[2];
     } else {
         peer = FluencePeer.default;
         relay = args[0];
config = args[1];
     }
    
     let request: RequestFlow;
     const promise = new Promise<void>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "relay") [] relay)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (call relay ("peer" "is_connected") [relay] isOnline)
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (match isOnline true
    (xor
     (call %init_peer_id% ("test" "doSomething") [])
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
    )
   )
   (null)
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', async () => {
                    return peer.connectionInfo.connectedRelays[0] || null;
                });
                h.on('getDataSrv', 'relay', async () => {return relay;});
                h.onEvent('callbackSrv', 'response', async (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', async (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for betterMessage');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
      
