/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.6.0-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface SomeSDef {
    checkU32: (u: number | null, callParams: CallParams<'u'>) => void | Promise<void>;
    getStr: (arg0: string | null, callParams: CallParams<'arg0'>) => string | null | Promise<string | null>;
    getStr1: (callParams: CallParams<null>) => string | null | Promise<string | null>;
    getStr2: (arg0: string, callParams: CallParams<'arg0'>) => string | Promise<string>;
}
export function registerSomeS(service: SomeSDef): void;
export function registerSomeS(serviceId: string, service: SomeSDef): void;
export function registerSomeS(peer: FluencePeer, service: SomeSDef): void;
export function registerSomeS(peer: FluencePeer, serviceId: string, service: SomeSDef): void;
       

export function registerSomeS(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "test2",
    "functions" : [
        {
            "functionName" : "checkU32",
            "argDefs" : [
                {
                    "name" : "u",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "getStr",
            "argDefs" : [
                {
                    "name" : "arg0",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "optional"
            }
        },
        {
            "functionName" : "getStr1",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "optional"
            }
        },
        {
            "functionName" : "getStr2",
            "argDefs" : [
                {
                    "name" : "arg0",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions
 

export function returnNone(
    config?: {ttl?: number}
): Promise<string | null>;

export function returnNone(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<string | null>;

export function returnNone(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $result
                        (seq
                         (call %init_peer_id% ("op" "noop") [])
                         (call %init_peer_id% ("op" "identity") [$result] result-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "returnNone",
    "returnType" : {
        "tag" : "optional"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function checkU32AndU8(
    a: number | null,
    config?: {ttl?: number}
): Promise<void>;

export function checkU32AndU8(
    peer: FluencePeer,
    a: number | null,
    config?: {ttl?: number}
): Promise<void>;

export function checkU32AndU8(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "a") [] a)
                      )
                      (call %init_peer_id% ("test2" "checkU32") [a])
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "checkU32AndU8",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
        {
            "name" : "a",
            "argType" : {
                "tag" : "optional"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function useOptional(
    opt: string | null,
    config?: {ttl?: number}
): Promise<string>;

export function useOptional(
    peer: FluencePeer,
    opt: string | null,
    config?: {ttl?: number}
): Promise<string>;

export function useOptional(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "opt") [] opt)
                        )
                        (call %init_peer_id% ("test2" "getStr") [opt] res)
                       )
                       (fold opt i
                        (seq
                         (call %init_peer_id% ("test2" "getStr2") [i])
                         (next i)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res.$.[0]!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "useOptional",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "opt",
            "argType" : {
                "tag" : "optional"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function returnOptional(
    config?: {ttl?: number}
): Promise<string | null>;

export function returnOptional(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<string | null>;

export function returnOptional(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("test2" "getStr1") [] res)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "returnOptional",
    "returnType" : {
        "tag" : "optional"
    },
    "argDefs" : [
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
