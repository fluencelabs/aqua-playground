/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.0-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

export interface LocalSrvDef {
    inside: (callParams: CallParams<null>) => void | Promise<void>;
}
export function registerLocalSrv(service: LocalSrvDef): void;
export function registerLocalSrv(serviceId: string, service: LocalSrvDef): void;
export function registerLocalSrv(peer: FluencePeer, service: LocalSrvDef): void;
export function registerLocalSrv(peer: FluencePeer, serviceId: string, service: LocalSrvDef): void;
       

export function registerLocalSrv(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "local_srv",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "inside" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "nil"
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function closureIn(
    peer1: string,
    config?: {ttl?: number}
): Promise<string>;

export function closureIn(
    peer: FluencePeer,
    peer1: string,
    config?: {ttl?: number}
): Promise<string>;

export function closureIn(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "peer1") [] peer1)
                         )
                         (par
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (seq
                             (call peer1 ("op" "identity") ["co on"] p1Id)
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                          )
                          (null)
                         )
                        )
                        (xor
                         (match "in" "in"
                          (xor
                           (call %init_peer_id% ("local_srv" "inside") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                         )
                         (null)
                        )
                       )
                       (call %init_peer_id% ("op" "identity") ["in"] p2Id)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p2Id])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "closureIn",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer1" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type ClosureBigResult = [string, string]
export function closureBig(
    peer1: string,
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureBigResult>;

export function closureBig(
    peer: FluencePeer,
    peer1: string,
    peer2: string,
    config?: {ttl?: number}
): Promise<ClosureBigResult>;

export function closureBig(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "peer1") [] peer1)
                           )
                           (call %init_peer_id% ("getDataSrv" "peer2") [] peer2)
                          )
                          (par
                           (seq
                            (call -relay- ("op" "noop") [])
                            (xor
                             (seq
                              (call peer1 ("op" "identity") ["co on"] p1Id)
                              (call -relay- ("op" "noop") [])
                             )
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                            )
                           )
                           (null)
                          )
                         )
                         (new $p2Id-0
                          (seq
                           (xor
                            (match "in" "in"
                             (xor
                              (seq
                               (call %init_peer_id% ("op" "identity") ["in"] p2)
                               (ap p2 $p2Id-0)
                              )
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                             )
                            )
                            (seq
                             (call %init_peer_id% ("peer" "identify") [] p2Info)
                             (ap p2Info.$.external_addresses.[0]! $p2Id-0)
                            )
                           )
                           (call %init_peer_id% ("op" "identity") [$p2Id-0.$.[0]!] p2Id-fix)
                          )
                         )
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call -relay- ("op" "noop") [])
                         (new $p2Id
                          (seq
                           (xor
                            (match "on" "in"
                             (xor
                              (seq
                               (call %init_peer_id% ("op" "identity") ["on"] p2-0)
                               (ap p2-0 $p2Id)
                              )
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                             )
                            )
                            (seq
                             (call %init_peer_id% ("peer" "identify") [] p2Info-0)
                             (ap p2Info-0.$.external_addresses.[0]! $p2Id)
                            )
                           )
                           (call %init_peer_id% ("op" "identity") [$p2Id.$.[0]!] p2Id-fix-0)
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p2Id-fix p2Id-fix-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "closureBig",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer1" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer2" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
