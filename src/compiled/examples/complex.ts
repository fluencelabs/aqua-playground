/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.2.0-SNAPSHOT
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';

// Services

export function registerSrv(service: {
    add_alias: (alias: string, service_id: string, callParams: CallParams<'alias' | 'service_id'>) => void;
    create: (blueprint_id: string, callParams: CallParams<'blueprint_id'>) => string;
    get_interface: (
        service_id: string,
        callParams: CallParams<'service_id'>,
    ) => {
        function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
        record_types: { fields: string[][]; id: number; name: string }[];
    };
    list: (callParams: CallParams<null>) => { blueprint_id: string; id: string; owner_id: string }[];
    remove: (service_id: string, callParams: CallParams<'service_id'>) => void;
    resolve_alias: (alias: string, callParams: CallParams<'alias'>) => string;
}): void;
export function registerSrv(
    serviceId: string,
    service: {
        add_alias: (alias: string, service_id: string, callParams: CallParams<'alias' | 'service_id'>) => void;
        create: (blueprint_id: string, callParams: CallParams<'blueprint_id'>) => string;
        get_interface: (
            service_id: string,
            callParams: CallParams<'service_id'>,
        ) => {
            function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
            record_types: { fields: string[][]; id: number; name: string }[];
        };
        list: (callParams: CallParams<null>) => { blueprint_id: string; id: string; owner_id: string }[];
        remove: (service_id: string, callParams: CallParams<'service_id'>) => void;
        resolve_alias: (alias: string, callParams: CallParams<'alias'>) => string;
    },
): void;
export function registerSrv(
    peer: FluencePeer,
    service: {
        add_alias: (alias: string, service_id: string, callParams: CallParams<'alias' | 'service_id'>) => void;
        create: (blueprint_id: string, callParams: CallParams<'blueprint_id'>) => string;
        get_interface: (
            service_id: string,
            callParams: CallParams<'service_id'>,
        ) => {
            function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
            record_types: { fields: string[][]; id: number; name: string }[];
        };
        list: (callParams: CallParams<null>) => { blueprint_id: string; id: string; owner_id: string }[];
        remove: (service_id: string, callParams: CallParams<'service_id'>) => void;
        resolve_alias: (alias: string, callParams: CallParams<'alias'>) => string;
    },
): void;
export function registerSrv(
    peer: FluencePeer,
    serviceId: string,
    service: {
        add_alias: (alias: string, service_id: string, callParams: CallParams<'alias' | 'service_id'>) => void;
        create: (blueprint_id: string, callParams: CallParams<'blueprint_id'>) => string;
        get_interface: (
            service_id: string,
            callParams: CallParams<'service_id'>,
        ) => {
            function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
            record_types: { fields: string[][]; id: number; name: string }[];
        };
        list: (callParams: CallParams<null>) => { blueprint_id: string; id: string; owner_id: string }[];
        remove: (service_id: string, callParams: CallParams<'service_id'>) => void;
        resolve_alias: (alias: string, callParams: CallParams<'alias'>) => string;
    },
): void;
export function registerSrv(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'srv';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'add_alias') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    alias: req.tetraplets[0],
                    service_id: req.tetraplets[1],
                },
            };
            resp.retCode = ResultCodes.success;
            service.add_alias(req.args[0], req.args[1], callParams);
            resp.result = {};
        }

        if (req.fnName === 'create') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    blueprint_id: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.create(req.args[0], callParams);
        }

        if (req.fnName === 'get_interface') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    service_id: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.get_interface(req.args[0], callParams);
        }

        if (req.fnName === 'list') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.list(callParams);
        }

        if (req.fnName === 'remove') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    service_id: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            service.remove(req.args[0], callParams);
            resp.result = {};
        }

        if (req.fnName === 'resolve_alias') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    alias: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.resolve_alias(req.args[0], callParams);
        }

        next();
    });
}

export function registerTestS(service: {
    multiline: (a: string, b: string, c: boolean, callParams: CallParams<'a' | 'b' | 'c'>) => string;
    t: (arg0: string, callParams: CallParams<'arg0'>) => string;
}): void;
export function registerTestS(
    serviceId: string,
    service: {
        multiline: (a: string, b: string, c: boolean, callParams: CallParams<'a' | 'b' | 'c'>) => string;
        t: (arg0: string, callParams: CallParams<'arg0'>) => string;
    },
): void;
export function registerTestS(
    peer: FluencePeer,
    service: {
        multiline: (a: string, b: string, c: boolean, callParams: CallParams<'a' | 'b' | 'c'>) => string;
        t: (arg0: string, callParams: CallParams<'arg0'>) => string;
    },
): void;
export function registerTestS(
    peer: FluencePeer,
    serviceId: string,
    service: {
        multiline: (a: string, b: string, c: boolean, callParams: CallParams<'a' | 'b' | 'c'>) => string;
        t: (arg0: string, callParams: CallParams<'arg0'>) => string;
    },
): void;
export function registerTestS(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'some-id';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'multiline') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    a: req.tetraplets[0],
                    b: req.tetraplets[1],
                    c: req.tetraplets[2],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.multiline(req.args[0], req.args[1], req.args[2], callParams);
        }

        if (req.fnName === 't') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    arg0: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.t(req.args[0], callParams);
        }

        next();
    });
}

export function registerPeer(service: {
    connect: (id: string, multiaddrs: string[] | null, callParams: CallParams<'id' | 'multiaddrs'>) => boolean;
    get_contact: (peer: string, callParams: CallParams<'peer'>) => { addresses: string[]; peer_id: string };
    identify: (callParams: CallParams<null>) => { external_addresses: string[] };
    is_connected: (peer: string, callParams: CallParams<'peer'>) => boolean;
    timestamp_ms: (callParams: CallParams<null>) => number;
    timestamp_sec: (callParams: CallParams<null>) => number;
}): void;
export function registerPeer(
    serviceId: string,
    service: {
        connect: (id: string, multiaddrs: string[] | null, callParams: CallParams<'id' | 'multiaddrs'>) => boolean;
        get_contact: (peer: string, callParams: CallParams<'peer'>) => { addresses: string[]; peer_id: string };
        identify: (callParams: CallParams<null>) => { external_addresses: string[] };
        is_connected: (peer: string, callParams: CallParams<'peer'>) => boolean;
        timestamp_ms: (callParams: CallParams<null>) => number;
        timestamp_sec: (callParams: CallParams<null>) => number;
    },
): void;
export function registerPeer(
    peer: FluencePeer,
    service: {
        connect: (id: string, multiaddrs: string[] | null, callParams: CallParams<'id' | 'multiaddrs'>) => boolean;
        get_contact: (peer: string, callParams: CallParams<'peer'>) => { addresses: string[]; peer_id: string };
        identify: (callParams: CallParams<null>) => { external_addresses: string[] };
        is_connected: (peer: string, callParams: CallParams<'peer'>) => boolean;
        timestamp_ms: (callParams: CallParams<null>) => number;
        timestamp_sec: (callParams: CallParams<null>) => number;
    },
): void;
export function registerPeer(
    peer: FluencePeer,
    serviceId: string,
    service: {
        connect: (id: string, multiaddrs: string[] | null, callParams: CallParams<'id' | 'multiaddrs'>) => boolean;
        get_contact: (peer: string, callParams: CallParams<'peer'>) => { addresses: string[]; peer_id: string };
        identify: (callParams: CallParams<null>) => { external_addresses: string[] };
        is_connected: (peer: string, callParams: CallParams<'peer'>) => boolean;
        timestamp_ms: (callParams: CallParams<null>) => number;
        timestamp_sec: (callParams: CallParams<null>) => number;
    },
): void;
export function registerPeer(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'peer';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'connect') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    id: req.tetraplets[0],
                    multiaddrs: req.tetraplets[1],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.connect(req.args[0], req.args[1], callParams);
        }

        if (req.fnName === 'get_contact') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    peer: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.get_contact(req.args[0], callParams);
        }

        if (req.fnName === 'identify') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.identify(callParams);
        }

        if (req.fnName === 'is_connected') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    peer: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.is_connected(req.args[0], callParams);
        }

        if (req.fnName === 'timestamp_ms') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.timestamp_ms(callParams);
        }

        if (req.fnName === 'timestamp_sec') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.timestamp_sec(callParams);
        }

        next();
    });
}

export function registerStringExtra(service: {
    addNameToHello: (arg0: string, callParams: CallParams<'arg0'>) => string;
}): void;
export function registerStringExtra(
    serviceId: string,
    service: {
        addNameToHello: (arg0: string, callParams: CallParams<'arg0'>) => string;
    },
): void;
export function registerStringExtra(
    peer: FluencePeer,
    service: {
        addNameToHello: (arg0: string, callParams: CallParams<'arg0'>) => string;
    },
): void;
export function registerStringExtra(
    peer: FluencePeer,
    serviceId: string,
    service: {
        addNameToHello: (arg0: string, callParams: CallParams<'arg0'>) => string;
    },
): void;
export function registerStringExtra(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'service-id';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'addNameToHello') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    arg0: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.addNameToHello(req.args[0], callParams);
        }

        next();
    });
}

export function registerOp(service: {
    array: (
        a: string,
        b: string | null,
        c: string | null,
        d: string | null,
        callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
    ) => string[];
    array_length: (array: string[], callParams: CallParams<'array'>) => number;
    bytes_from_b58: (b: string, callParams: CallParams<'b'>) => number[];
    bytes_to_b58: (bs: number[], callParams: CallParams<'bs'>) => string;
    concat: (
        a: string[],
        b: string[] | null,
        c: string[] | null,
        d: string[] | null,
        callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
    ) => string[];
    concat_strings: (a: string, b: string, callParams: CallParams<'a' | 'b'>) => string;
    identity: (s: string | null, callParams: CallParams<'s'>) => string | null;
    noop: (callParams: CallParams<null>) => void;
    sha256_string: (s: string, callParams: CallParams<'s'>) => string;
    string_from_b58: (b: string, callParams: CallParams<'b'>) => string;
    string_to_b58: (s: string, callParams: CallParams<'s'>) => string;
}): void;
export function registerOp(
    serviceId: string,
    service: {
        array: (
            a: string,
            b: string | null,
            c: string | null,
            d: string | null,
            callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
        ) => string[];
        array_length: (array: string[], callParams: CallParams<'array'>) => number;
        bytes_from_b58: (b: string, callParams: CallParams<'b'>) => number[];
        bytes_to_b58: (bs: number[], callParams: CallParams<'bs'>) => string;
        concat: (
            a: string[],
            b: string[] | null,
            c: string[] | null,
            d: string[] | null,
            callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
        ) => string[];
        concat_strings: (a: string, b: string, callParams: CallParams<'a' | 'b'>) => string;
        identity: (s: string | null, callParams: CallParams<'s'>) => string | null;
        noop: (callParams: CallParams<null>) => void;
        sha256_string: (s: string, callParams: CallParams<'s'>) => string;
        string_from_b58: (b: string, callParams: CallParams<'b'>) => string;
        string_to_b58: (s: string, callParams: CallParams<'s'>) => string;
    },
): void;
export function registerOp(
    peer: FluencePeer,
    service: {
        array: (
            a: string,
            b: string | null,
            c: string | null,
            d: string | null,
            callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
        ) => string[];
        array_length: (array: string[], callParams: CallParams<'array'>) => number;
        bytes_from_b58: (b: string, callParams: CallParams<'b'>) => number[];
        bytes_to_b58: (bs: number[], callParams: CallParams<'bs'>) => string;
        concat: (
            a: string[],
            b: string[] | null,
            c: string[] | null,
            d: string[] | null,
            callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
        ) => string[];
        concat_strings: (a: string, b: string, callParams: CallParams<'a' | 'b'>) => string;
        identity: (s: string | null, callParams: CallParams<'s'>) => string | null;
        noop: (callParams: CallParams<null>) => void;
        sha256_string: (s: string, callParams: CallParams<'s'>) => string;
        string_from_b58: (b: string, callParams: CallParams<'b'>) => string;
        string_to_b58: (s: string, callParams: CallParams<'s'>) => string;
    },
): void;
export function registerOp(
    peer: FluencePeer,
    serviceId: string,
    service: {
        array: (
            a: string,
            b: string | null,
            c: string | null,
            d: string | null,
            callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
        ) => string[];
        array_length: (array: string[], callParams: CallParams<'array'>) => number;
        bytes_from_b58: (b: string, callParams: CallParams<'b'>) => number[];
        bytes_to_b58: (bs: number[], callParams: CallParams<'bs'>) => string;
        concat: (
            a: string[],
            b: string[] | null,
            c: string[] | null,
            d: string[] | null,
            callParams: CallParams<'a' | 'b' | 'c' | 'd'>,
        ) => string[];
        concat_strings: (a: string, b: string, callParams: CallParams<'a' | 'b'>) => string;
        identity: (s: string | null, callParams: CallParams<'s'>) => string | null;
        noop: (callParams: CallParams<null>) => void;
        sha256_string: (s: string, callParams: CallParams<'s'>) => string;
        string_from_b58: (b: string, callParams: CallParams<'b'>) => string;
        string_to_b58: (s: string, callParams: CallParams<'s'>) => string;
    },
): void;
export function registerOp(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'op';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'array') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    a: req.tetraplets[0],
                    b: req.tetraplets[1],
                    c: req.tetraplets[2],
                    d: req.tetraplets[3],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.array(req.args[0], req.args[1], req.args[2], req.args[3], callParams);
        }

        if (req.fnName === 'array_length') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    array: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.array_length(req.args[0], callParams);
        }

        if (req.fnName === 'bytes_from_b58') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    b: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.bytes_from_b58(req.args[0], callParams);
        }

        if (req.fnName === 'bytes_to_b58') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    bs: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.bytes_to_b58(req.args[0], callParams);
        }

        if (req.fnName === 'concat') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    a: req.tetraplets[0],
                    b: req.tetraplets[1],
                    c: req.tetraplets[2],
                    d: req.tetraplets[3],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.concat(req.args[0], req.args[1], req.args[2], req.args[3], callParams);
        }

        if (req.fnName === 'concat_strings') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    a: req.tetraplets[0],
                    b: req.tetraplets[1],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.concat_strings(req.args[0], req.args[1], callParams);
        }

        if (req.fnName === 'identity') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    s: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.identity(req.args[0], callParams);
        }

        if (req.fnName === 'noop') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            service.noop(callParams);
            resp.result = {};
        }

        if (req.fnName === 'sha256_string') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    s: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.sha256_string(req.args[0], callParams);
        }

        if (req.fnName === 'string_from_b58') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    b: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.string_from_b58(req.args[0], callParams);
        }

        if (req.fnName === 'string_to_b58') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    s: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.string_to_b58(req.args[0], callParams);
        }

        next();
    });
}

export function registerScript(service: {
    add: (air_script: string, interval: string | null, callParams: CallParams<'air_script' | 'interval'>) => string;
    list: (callParams: CallParams<null>) => {
        failures: number;
        id: string;
        interval: string;
        owner: string;
        src: string;
    };
    remove: (script_id: string, callParams: CallParams<'script_id'>) => boolean;
}): void;
export function registerScript(
    serviceId: string,
    service: {
        add: (air_script: string, interval: string | null, callParams: CallParams<'air_script' | 'interval'>) => string;
        list: (callParams: CallParams<null>) => {
            failures: number;
            id: string;
            interval: string;
            owner: string;
            src: string;
        };
        remove: (script_id: string, callParams: CallParams<'script_id'>) => boolean;
    },
): void;
export function registerScript(
    peer: FluencePeer,
    service: {
        add: (air_script: string, interval: string | null, callParams: CallParams<'air_script' | 'interval'>) => string;
        list: (callParams: CallParams<null>) => {
            failures: number;
            id: string;
            interval: string;
            owner: string;
            src: string;
        };
        remove: (script_id: string, callParams: CallParams<'script_id'>) => boolean;
    },
): void;
export function registerScript(
    peer: FluencePeer,
    serviceId: string,
    service: {
        add: (air_script: string, interval: string | null, callParams: CallParams<'air_script' | 'interval'>) => string;
        list: (callParams: CallParams<null>) => {
            failures: number;
            id: string;
            interval: string;
            owner: string;
            src: string;
        };
        remove: (script_id: string, callParams: CallParams<'script_id'>) => boolean;
    },
): void;
export function registerScript(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'script';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'add') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    air_script: req.tetraplets[0],
                    interval: req.tetraplets[1],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.add(req.args[0], req.args[1], callParams);
        }

        if (req.fnName === 'list') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.list(callParams);
        }

        if (req.fnName === 'remove') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    script_id: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.remove(req.args[0], callParams);
        }

        next();
    });
}

export function registerTestSrv(service: { str: (callParams: CallParams<null>) => string }): void;
export function registerTestSrv(
    serviceId: string,
    service: {
        str: (callParams: CallParams<null>) => string;
    },
): void;
export function registerTestSrv(
    peer: FluencePeer,
    service: {
        str: (callParams: CallParams<null>) => string;
    },
): void;
export function registerTestSrv(
    peer: FluencePeer,
    serviceId: string,
    service: {
        str: (callParams: CallParams<null>) => string;
    },
): void;
export function registerTestSrv(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'test-service-id';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'str') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.str(callParams);
        }

        next();
    });
}

export function registerDist(service: {
    add_blueprint: (blueprint: { dependencies: string[]; name: string }, callParams: CallParams<'blueprint'>) => string;
    add_module: (
        wasm_b56_content: number[],
        conf: { name: string },
        callParams: CallParams<'wasm_b56_content' | 'conf'>,
    ) => string;
    add_module_from_vault: (
        path: string,
        config: { name: string },
        callParams: CallParams<'path' | 'config'>,
    ) => string;
    default_module_config: (module_name: string, callParams: CallParams<'module_name'>) => { name: string };
    get_interface: (
        module_id: string,
        callParams: CallParams<'module_id'>,
    ) => {
        function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
        record_types: { fields: string[][]; id: number; name: string }[];
    };
    list_blueprints: (callParams: CallParams<null>) => { dependencies: string[]; id: string; name: string }[];
    list_modules: (callParams: CallParams<null>) => { config: { name: string }; hash: string; name: string }[];
    make_blueprint: (
        name: string,
        dependencies: string[],
        callParams: CallParams<'name' | 'dependencies'>,
    ) => { dependencies: string[]; name: string };
    make_module_config: (
        name: string,
        mem_pages_count: number | null,
        logger_enabled: boolean | null,
        preopened_files: string[] | null,
        envs: string[][] | null,
        mapped_dirs: string[][] | null,
        mounted_binaries: string[][] | null,
        logging_mask: number | null,
        callParams: CallParams<
            | 'name'
            | 'mem_pages_count'
            | 'logger_enabled'
            | 'preopened_files'
            | 'envs'
            | 'mapped_dirs'
            | 'mounted_binaries'
            | 'logging_mask'
        >,
    ) => { name: string };
}): void;
export function registerDist(
    serviceId: string,
    service: {
        add_blueprint: (
            blueprint: { dependencies: string[]; name: string },
            callParams: CallParams<'blueprint'>,
        ) => string;
        add_module: (
            wasm_b56_content: number[],
            conf: { name: string },
            callParams: CallParams<'wasm_b56_content' | 'conf'>,
        ) => string;
        add_module_from_vault: (
            path: string,
            config: { name: string },
            callParams: CallParams<'path' | 'config'>,
        ) => string;
        default_module_config: (module_name: string, callParams: CallParams<'module_name'>) => { name: string };
        get_interface: (
            module_id: string,
            callParams: CallParams<'module_id'>,
        ) => {
            function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
            record_types: { fields: string[][]; id: number; name: string }[];
        };
        list_blueprints: (callParams: CallParams<null>) => { dependencies: string[]; id: string; name: string }[];
        list_modules: (callParams: CallParams<null>) => { config: { name: string }; hash: string; name: string }[];
        make_blueprint: (
            name: string,
            dependencies: string[],
            callParams: CallParams<'name' | 'dependencies'>,
        ) => { dependencies: string[]; name: string };
        make_module_config: (
            name: string,
            mem_pages_count: number | null,
            logger_enabled: boolean | null,
            preopened_files: string[] | null,
            envs: string[][] | null,
            mapped_dirs: string[][] | null,
            mounted_binaries: string[][] | null,
            logging_mask: number | null,
            callParams: CallParams<
                | 'name'
                | 'mem_pages_count'
                | 'logger_enabled'
                | 'preopened_files'
                | 'envs'
                | 'mapped_dirs'
                | 'mounted_binaries'
                | 'logging_mask'
            >,
        ) => { name: string };
    },
): void;
export function registerDist(
    peer: FluencePeer,
    service: {
        add_blueprint: (
            blueprint: { dependencies: string[]; name: string },
            callParams: CallParams<'blueprint'>,
        ) => string;
        add_module: (
            wasm_b56_content: number[],
            conf: { name: string },
            callParams: CallParams<'wasm_b56_content' | 'conf'>,
        ) => string;
        add_module_from_vault: (
            path: string,
            config: { name: string },
            callParams: CallParams<'path' | 'config'>,
        ) => string;
        default_module_config: (module_name: string, callParams: CallParams<'module_name'>) => { name: string };
        get_interface: (
            module_id: string,
            callParams: CallParams<'module_id'>,
        ) => {
            function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
            record_types: { fields: string[][]; id: number; name: string }[];
        };
        list_blueprints: (callParams: CallParams<null>) => { dependencies: string[]; id: string; name: string }[];
        list_modules: (callParams: CallParams<null>) => { config: { name: string }; hash: string; name: string }[];
        make_blueprint: (
            name: string,
            dependencies: string[],
            callParams: CallParams<'name' | 'dependencies'>,
        ) => { dependencies: string[]; name: string };
        make_module_config: (
            name: string,
            mem_pages_count: number | null,
            logger_enabled: boolean | null,
            preopened_files: string[] | null,
            envs: string[][] | null,
            mapped_dirs: string[][] | null,
            mounted_binaries: string[][] | null,
            logging_mask: number | null,
            callParams: CallParams<
                | 'name'
                | 'mem_pages_count'
                | 'logger_enabled'
                | 'preopened_files'
                | 'envs'
                | 'mapped_dirs'
                | 'mounted_binaries'
                | 'logging_mask'
            >,
        ) => { name: string };
    },
): void;
export function registerDist(
    peer: FluencePeer,
    serviceId: string,
    service: {
        add_blueprint: (
            blueprint: { dependencies: string[]; name: string },
            callParams: CallParams<'blueprint'>,
        ) => string;
        add_module: (
            wasm_b56_content: number[],
            conf: { name: string },
            callParams: CallParams<'wasm_b56_content' | 'conf'>,
        ) => string;
        add_module_from_vault: (
            path: string,
            config: { name: string },
            callParams: CallParams<'path' | 'config'>,
        ) => string;
        default_module_config: (module_name: string, callParams: CallParams<'module_name'>) => { name: string };
        get_interface: (
            module_id: string,
            callParams: CallParams<'module_id'>,
        ) => {
            function_signatures: { arguments: string[][]; name: string; output_types: string[] }[];
            record_types: { fields: string[][]; id: number; name: string }[];
        };
        list_blueprints: (callParams: CallParams<null>) => { dependencies: string[]; id: string; name: string }[];
        list_modules: (callParams: CallParams<null>) => { config: { name: string }; hash: string; name: string }[];
        make_blueprint: (
            name: string,
            dependencies: string[],
            callParams: CallParams<'name' | 'dependencies'>,
        ) => { dependencies: string[]; name: string };
        make_module_config: (
            name: string,
            mem_pages_count: number | null,
            logger_enabled: boolean | null,
            preopened_files: string[] | null,
            envs: string[][] | null,
            mapped_dirs: string[][] | null,
            mounted_binaries: string[][] | null,
            logging_mask: number | null,
            callParams: CallParams<
                | 'name'
                | 'mem_pages_count'
                | 'logger_enabled'
                | 'preopened_files'
                | 'envs'
                | 'mapped_dirs'
                | 'mounted_binaries'
                | 'logging_mask'
            >,
        ) => { name: string };
    },
): void;
export function registerDist(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'dist';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'add_blueprint') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    blueprint: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.add_blueprint(req.args[0], callParams);
        }

        if (req.fnName === 'add_module') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    wasm_b56_content: req.tetraplets[0],
                    conf: req.tetraplets[1],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.add_module(req.args[0], req.args[1], callParams);
        }

        if (req.fnName === 'add_module_from_vault') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    path: req.tetraplets[0],
                    config: req.tetraplets[1],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.add_module_from_vault(req.args[0], req.args[1], callParams);
        }

        if (req.fnName === 'default_module_config') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    module_name: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.default_module_config(req.args[0], callParams);
        }

        if (req.fnName === 'get_interface') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    module_id: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.get_interface(req.args[0], callParams);
        }

        if (req.fnName === 'list_blueprints') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.list_blueprints(callParams);
        }

        if (req.fnName === 'list_modules') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {},
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.list_modules(callParams);
        }

        if (req.fnName === 'make_blueprint') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    name: req.tetraplets[0],
                    dependencies: req.tetraplets[1],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.make_blueprint(req.args[0], req.args[1], callParams);
        }

        if (req.fnName === 'make_module_config') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    name: req.tetraplets[0],
                    mem_pages_count: req.tetraplets[1],
                    logger_enabled: req.tetraplets[2],
                    preopened_files: req.tetraplets[3],
                    envs: req.tetraplets[4],
                    mapped_dirs: req.tetraplets[5],
                    mounted_binaries: req.tetraplets[6],
                    logging_mask: req.tetraplets[7],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.make_module_config(
                req.args[0],
                req.args[1],
                req.args[2],
                req.args[3],
                req.args[4],
                req.args[5],
                req.args[6],
                req.args[7],
                callParams,
            );
        }

        next();
    });
}

export function registerKademlia(service: {
    merge: (
        target: string,
        left: string[],
        right: string[],
        count: number | null,
        callParams: CallParams<'target' | 'left' | 'right' | 'count'>,
    ) => string[];
    neighborhood: (
        key: string,
        already_hashed: boolean | null,
        count: number | null,
        callParams: CallParams<'key' | 'already_hashed' | 'count'>,
    ) => string[];
}): void;
export function registerKademlia(
    serviceId: string,
    service: {
        merge: (
            target: string,
            left: string[],
            right: string[],
            count: number | null,
            callParams: CallParams<'target' | 'left' | 'right' | 'count'>,
        ) => string[];
        neighborhood: (
            key: string,
            already_hashed: boolean | null,
            count: number | null,
            callParams: CallParams<'key' | 'already_hashed' | 'count'>,
        ) => string[];
    },
): void;
export function registerKademlia(
    peer: FluencePeer,
    service: {
        merge: (
            target: string,
            left: string[],
            right: string[],
            count: number | null,
            callParams: CallParams<'target' | 'left' | 'right' | 'count'>,
        ) => string[];
        neighborhood: (
            key: string,
            already_hashed: boolean | null,
            count: number | null,
            callParams: CallParams<'key' | 'already_hashed' | 'count'>,
        ) => string[];
    },
): void;
export function registerKademlia(
    peer: FluencePeer,
    serviceId: string,
    service: {
        merge: (
            target: string,
            left: string[],
            right: string[],
            count: number | null,
            callParams: CallParams<'target' | 'left' | 'right' | 'count'>,
        ) => string[];
        neighborhood: (
            key: string,
            already_hashed: boolean | null,
            count: number | null,
            callParams: CallParams<'key' | 'already_hashed' | 'count'>,
        ) => string[];
    },
): void;
export function registerKademlia(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'kad';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'merge') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    target: req.tetraplets[0],
                    left: req.tetraplets[1],
                    right: req.tetraplets[2],
                    count: req.tetraplets[3],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.merge(req.args[0], req.args[1], req.args[2], req.args[3], callParams);
        }

        if (req.fnName === 'neighborhood') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    key: req.tetraplets[0],
                    already_hashed: req.tetraplets[1],
                    count: req.tetraplets[2],
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.neighborhood(req.args[0], req.args[1], req.args[2], callParams);
        }

        next();
    });
}

export function registerPrintln(service: { print: (arg0: string, callParams: CallParams<'arg0'>) => void }): void;
export function registerPrintln(
    serviceId: string,
    service: {
        print: (arg0: string, callParams: CallParams<'arg0'>) => void;
    },
): void;
export function registerPrintln(
    peer: FluencePeer,
    service: {
        print: (arg0: string, callParams: CallParams<'arg0'>) => void;
    },
): void;
export function registerPrintln(
    peer: FluencePeer,
    serviceId: string,
    service: {
        print: (arg0: string, callParams: CallParams<'arg0'>) => void;
    },
): void;
export function registerPrintln(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = 'println-service-id';
    }

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    peer.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'print') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    arg0: req.tetraplets[0],
                },
            };
            resp.retCode = ResultCodes.success;
            service.print(req.args[0], callParams);
            resp.result = {};
        }

        next();
    });
}

// Functions

export async function helloWorld(name: string, config?: { ttl?: number }): Promise<string>;
export async function helloWorld(peer: FluencePeer, name: string, config?: { ttl?: number }): Promise<string>;
export async function helloWorld(...args) {
    let peer: FluencePeer;
    let name;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        name = args[1];
        config = args[2];
    } else {
        peer = FluencePeer.default;
        name = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<string>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "name") [] name)
   )
   (call %init_peer_id% ("service-id" "addNameToHello") [name] res)
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'name', () => {
                    return name;
                });
                h.onEvent('callbackSrv', 'response', (args) => {
                    const [res] = args;
                    resolve(res);
                });

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for helloWorld');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return promise;
}

export async function print(str: string, config?: { ttl?: number }): Promise<void>;
export async function print(peer: FluencePeer, str: string, config?: { ttl?: number }): Promise<void>;
export async function print(...args) {
    let peer: FluencePeer;
    let str;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        str = args[1];
        config = args[2];
    } else {
        peer = FluencePeer.default;
        str = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "str") [] str)
  )
  (call %init_peer_id% ("println-service-id" "print") [str])
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'str', () => {
                    return str;
                });
                h.onEvent('callbackSrv', 'response', (args) => {});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for print');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}

export async function testFunc(config?: { ttl?: number }): Promise<string>;
export async function testFunc(peer: FluencePeer, config?: { ttl?: number }): Promise<string>;
export async function testFunc(...args) {
    let peer: FluencePeer;

    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        config = args[1];
    } else {
        peer = FluencePeer.default;
        config = args[0];
    }

    let request: RequestFlow;
    const promise = new Promise<string>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("test-service-id" "str") [] res)
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });

                h.onEvent('callbackSrv', 'response', (args) => {
                    const [res] = args;
                    resolve(res);
                });

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for testFunc');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return promise;
}

export async function doStuff(
    a: string,
    b: string,
    c: boolean,
    d: boolean,
    e: string[],
    g: string[],
    str: string,
    config?: { ttl?: number },
): Promise<string[]>;
export async function doStuff(
    peer: FluencePeer,
    a: string,
    b: string,
    c: boolean,
    d: boolean,
    e: string[],
    g: string[],
    str: string,
    config?: { ttl?: number },
): Promise<string[]>;
export async function doStuff(...args) {
    let peer: FluencePeer;
    let a;
    let b;
    let c;
    let d;
    let e;
    let g;
    let str;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        a = args[1];
        b = args[2];
        c = args[3];
        d = args[4];
        e = args[5];
        g = args[6];
        str = args[7];
        config = args[8];
    } else {
        peer = FluencePeer.default;
        a = args[0];
        b = args[1];
        c = args[2];
        d = args[3];
        e = args[4];
        g = args[5];
        str = args[6];
        config = args[7];
    }

    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (seq
           (seq
            (seq
             (seq
              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
              (call %init_peer_id% ("getDataSrv" "a") [] a)
             )
             (call %init_peer_id% ("getDataSrv" "b") [] b)
            )
            (call %init_peer_id% ("getDataSrv" "c") [] c)
           )
           (call %init_peer_id% ("getDataSrv" "d") [] d)
          )
          (call %init_peer_id% ("getDataSrv" "e") [] e)
         )
         (call %init_peer_id% ("getDataSrv" "g") [] g)
        )
        (call %init_peer_id% ("getDataSrv" "str") [] str)
       )
       (par
        (par
         (seq
          (seq
           (call %init_peer_id% ("some-id" "t") [str] $stream)
           (call -relay- ("op" "noop") [])
          )
          (call b ("op" "noop") [])
         )
         (call %init_peer_id% ("println-service-id" "print") [a])
        )
        (seq
         (call -relay- ("op" "noop") [])
         (xor
          (call a ("peer" "identify") [])
          (seq
           (seq
            (call -relay- ("op" "noop") [])
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
           )
           (call -relay- ("op" "noop") [])
          )
         )
        )
       )
      )
      (call -relay- ("op" "noop") [])
     )
     (xor
      (seq
       (call -relay- ("op" "noop") [])
       (xor
        (match c true
         (xor
          (match d true
           (xor
            (fold e eEl
             (seq
              (seq
               (fold g gEl
                (seq
                 (seq
                  (call b ("some-id" "t") [gEl] $stream)
                  (call b ("some-id" "t") [eEl] $stream)
                 )
                 (next gEl)
                )
               )
               (call b ("some-id" "t") [eEl] $stream)
              )
              (next eEl)
             )
            )
            (seq
             (call -relay- ("op" "noop") [])
             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
            )
           )
          )
          (null)
         )
        )
        (null)
       )
      )
      (seq
       (call -relay- ("op" "noop") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
      )
     )
    )
    (call -relay- ("op" "noop") [])
   )
   (call %init_peer_id% ("some-id" "multiline") [a b c] $stream)
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$stream])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'a', () => {
                    return a;
                });
                h.on('getDataSrv', 'b', () => {
                    return b;
                });
                h.on('getDataSrv', 'c', () => {
                    return c;
                });
                h.on('getDataSrv', 'd', () => {
                    return d;
                });
                h.on('getDataSrv', 'e', () => {
                    return e;
                });
                h.on('getDataSrv', 'g', () => {
                    return g;
                });
                h.on('getDataSrv', 'str', () => {
                    return str;
                });
                h.onEvent('callbackSrv', 'response', (args) => {
                    const [res] = args;
                    resolve(res);
                });

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for doStuff');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return promise;
}
