/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.2-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


function missingFields(obj: any, fields: string[]): string[] {
    return fields.filter(f => !(f in obj))
}

// Services

export interface TestoDef {
    getString: (arg0: string, callParams: CallParams<'arg0'>) => string;
}
export function registerTesto(service: TestoDef): void;
export function registerTesto(serviceId: string, service: TestoDef): void;
export function registerTesto(peer: FluencePeer, service: TestoDef): void;
export function registerTesto(peer: FluencePeer, serviceId: string, service: TestoDef): void;
       

export function registerTesto(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "testo",
    "functions" : [
        {
            "functionName" : "getString",
            "argDefs" : [
                {
                    "name" : "arg0",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      


export interface LocalPrintDef {
    print: (arg0: string, callParams: CallParams<'arg0'>) => void;
}
export function registerLocalPrint(service: LocalPrintDef): void;
export function registerLocalPrint(serviceId: string, service: LocalPrintDef): void;
export function registerLocalPrint(peer: FluencePeer, service: LocalPrintDef): void;
export function registerLocalPrint(peer: FluencePeer, serviceId: string, service: LocalPrintDef): void;
       

export function registerLocalPrint(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "lp",
    "functions" : [
        {
            "functionName" : "print",
            "argDefs" : [
                {
                    "name" : "arg0",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        }
    ]
}
    );
}
      
// Functions
 

export function topologyTest(me: string, myRelay: string, friend: string, friendRelay: string, config?: {ttl?: number}): Promise<string>;
export function topologyTest(peer: FluencePeer, me: string, myRelay: string, friend: string, friendRelay: string, config?: {ttl?: number}): Promise<string>;
export function topologyTest(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "me") [] me)
                           )
                           (call %init_peer_id% ("getDataSrv" "myRelay") [] myRelay)
                          )
                          (call %init_peer_id% ("getDataSrv" "friend") [] friend)
                         )
                         (call %init_peer_id% ("getDataSrv" "friendRelay") [] friendRelay)
                        )
                        (par
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call friendRelay ("op" "noop") [])
                             )
                             (xor
                              (call friend ("testo" "getString") ["friends string via"] str2)
                              (seq
                               (seq
                                (call friendRelay ("op" "noop") [])
                                (call -relay- ("op" "noop") [])
                               )
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                             )
                            )
                            (call friendRelay ("op" "noop") [])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (call %init_peer_id% ("op" "noop") [])
                         )
                         (call %init_peer_id% ("lp" "print") ["my string in par"])
                        )
                       )
                       (call %init_peer_id% ("lp" "print") [str2])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") ["finish"])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "topologyTest",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "me",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "myRelay",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "friend",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "friendRelay",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
