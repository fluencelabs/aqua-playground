/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.2-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import { CallParams, callFunction, registerService } from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';

function missingFields(obj: any, fields: string[]): string[] {
    return fields.filter((f) => !(f in obj));
}

// Services

export interface CoServiceDef {
    call: (callParams: CallParams<null>) => string;
}
export function registerCoService(service: CoServiceDef): void;
export function registerCoService(serviceId: string, service: CoServiceDef): void;
export function registerCoService(peer: FluencePeer, service: CoServiceDef): void;
export function registerCoService(peer: FluencePeer, serviceId: string, service: CoServiceDef): void;

export function registerCoService(...args: any) {
    registerService(args, {
        defaultServiceId: 'coservice-id',
        functions: [
            {
                functionName: 'call',
                argDefs: [
                    {
                        name: 'arg0',
                        isOptional: false,
                        callbackDef: null,
                    },
                ],
                returnType: {
                    isVoid: true,
                    isOptional: false,
                },
            },
        ],
    });
}

// Functions

export function coFunc(
    node: string,
    c: (arg0: { external_addresses: string[] }, callParams: CallParams<'arg0'>) => void,
    config?: { ttl?: number },
): Promise<void>;
export function coFunc(
    peer: FluencePeer,
    node: string,
    c: (arg0: { external_addresses: string[] }, callParams: CallParams<'arg0'>) => void,
    config?: { ttl?: number },
): Promise<void>;
export function coFunc(...args: any) {
    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call %init_peer_id% ("coservice-id" "call") [] y)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node ("peer" "identify") [] t)
                         (par
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (call %init_peer_id% ("callbackSrv" "c") [t])
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                           )
                          )
                          (null)
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                       )
                      )
                      (call %init_peer_id% ("coservice-id" "call") [] x)
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'coFunc',
            returnType: {
                isVoid: true,
                isOptional: false,
            },
            argDefs: [
                {
                    name: 'node',
                    isOptional: false,
                    callbackDef: null,
                },
                {
                    name: 'c',
                    isOptional: false,
                    callbackDef: {
                        argDefs: [],
                        returnType: {
                            isVoid: false,
                            isOptional: false,
                        },
                    },
                },
            ],
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
