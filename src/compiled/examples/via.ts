/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.3-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

// Functions
 
export type ViaArrResult = { air_version: string; external_addresses: string[]; node_version: string; }
export function viaArr(
    node_id: string,
    viaAr: string[],
    config?: {ttl?: number}
): Promise<ViaArrResult>;

export function viaArr(
    peer: FluencePeer,
    node_id: string,
    viaAr: string[],
    config?: {ttl?: number}
): Promise<ViaArrResult>;

export function viaArr(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "viaAr") [] viaAr)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (fold viaAr -via-peer-
                         (seq
                          (call -via-peer- ("op" "noop") [])
                          (next -via-peer-)
                         )
                        )
                       )
                       (xor
                        (seq
                         (seq
                          (call node_id ("peer" "identify") [] p)
                          (fold viaAr -via-peer-
                           (seq
                            (next -via-peer-)
                            (call -via-peer- ("op" "noop") [])
                           )
                          )
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (fold viaAr -via-peer-
                           (seq
                            (call -via-peer- ("op" "noop") [])
                            (next -via-peer-)
                           )
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "viaArr",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "viaAr" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Info",
                    "fields" : {
                        "air_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "external_addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "node_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type ViaStreamResult = { air_version: string; external_addresses: string[]; node_version: string; }
export function viaStream(
    node_id: string,
    viaStr: string[],
    config?: {ttl?: number}
): Promise<ViaStreamResult>;

export function viaStream(
    peer: FluencePeer,
    node_id: string,
    viaStr: string[],
    config?: {ttl?: number}
): Promise<ViaStreamResult>;

export function viaStream(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "viaStr") [] viaStr-iter)
                          )
                          (fold viaStr-iter viaStr-item-0
                           (seq
                            (ap viaStr-item-0 $viaStr)
                            (next viaStr-item-0)
                           )
                          )
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (fold $viaStr -via-peer-
                         (seq
                          (call -via-peer- ("op" "noop") [])
                          (next -via-peer-)
                         )
                        )
                       )
                       (xor
                        (seq
                         (seq
                          (call node_id ("peer" "identify") [] p)
                          (fold $viaStr -via-peer-
                           (seq
                            (next -via-peer-)
                            (call -via-peer- ("op" "noop") [])
                           )
                          )
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (fold $viaStr -via-peer-
                           (seq
                            (call -via-peer- ("op" "noop") [])
                            (next -via-peer-)
                           )
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "viaStream",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "viaStr" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Info",
                    "fields" : {
                        "air_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "external_addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "node_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type ViaOptResult = { air_version: string; external_addresses: string[]; node_version: string; }
export function viaOpt(
    relay: string,
    node_id: string,
    viaOpt: string | null,
    config?: {ttl?: number}
): Promise<ViaOptResult>;

export function viaOpt(
    peer: FluencePeer,
    relay: string,
    node_id: string,
    viaOpt: string | null,
    config?: {ttl?: number}
): Promise<ViaOptResult>;

export function viaOpt(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                           )
                           (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "viaOpt") [] viaOpt)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (fold viaOpt -via-peer-
                         (seq
                          (call -via-peer- ("op" "noop") [])
                          (next -via-peer-)
                         )
                        )
                       )
                       (xor
                        (seq
                         (seq
                          (call node_id ("peer" "identify") [] p)
                          (fold viaOpt -via-peer-
                           (seq
                            (next -via-peer-)
                            (call -via-peer- ("op" "noop") [])
                           )
                          )
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (seq
                          (fold viaOpt -via-peer-
                           (seq
                            (call -via-peer- ("op" "noop") [])
                            (next -via-peer-)
                           )
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [p])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "viaOpt",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "node_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "viaOpt" : {
                    "tag" : "option",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Info",
                    "fields" : {
                        "air_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "external_addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "node_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
