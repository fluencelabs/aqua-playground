/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.2.0-SNAPSHOT
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';

// Services

// Functions

export async function print(str: string, config?: { ttl?: number }): Promise<void>;
export async function print(peer: FluencePeer, str: string, config?: { ttl?: number }): Promise<void>;
export async function print(...args) {
    let peer: FluencePeer;
    let str;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        str = args[1];
        config = args[2];
    } else {
        peer = FluencePeer.default;
        str = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "str") [] str)
  )
  (call %init_peer_id% ("println-service-id" "print") [str])
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'str', () => {
                    return str;
                });
                h.onEvent('callbackSrv', 'response', (args) => {});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for print');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}

export async function iterateAndPrint(strings: string[], config?: { ttl?: number }): Promise<void>;
export async function iterateAndPrint(peer: FluencePeer, strings: string[], config?: { ttl?: number }): Promise<void>;
export async function iterateAndPrint(...args) {
    let peer: FluencePeer;
    let strings;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        strings = args[1];
        config = args[2];
    } else {
        peer = FluencePeer.default;
        strings = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "strings") [] strings)
  )
  (fold strings s
   (seq
    (call %init_peer_id% ("println-service-id" "print") [s])
    (next s)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'strings', () => {
                    return strings;
                });
                h.onEvent('callbackSrv', 'response', (args) => {});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for iterateAndPrint');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}

export async function iterateAndPrintParallel(
    nodes: string[],
    c: (arg0: { external_addresses: string[] }, callParams: CallParams<'arg0'>) => Promise<void>,
    config?: { ttl?: number },
): Promise<void>;
export async function iterateAndPrintParallel(
    peer: FluencePeer,
    nodes: string[],
    c: (arg0: { external_addresses: string[] }, callParams: CallParams<'arg0'>) => Promise<void>,
    config?: { ttl?: number },
): Promise<void>;
export async function iterateAndPrintParallel(...args) {
    let peer: FluencePeer;
    let nodes;
    let c;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        nodes = args[1];
        c = args[2];
        config = args[3];
    } else {
        peer = FluencePeer.default;
        nodes = args[0];
        c = args[1];
        config = args[2];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "nodes") [] nodes)
  )
  (fold nodes s
   (par
    (seq
     (call -relay- ("op" "noop") [])
     (xor
      (seq
       (seq
        (call s ("peer" "identify") [] ads)
        (call -relay- ("op" "noop") [])
       )
       (xor
        (call %init_peer_id% ("callbackSrv" "c") [ads])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
       )
      )
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
     )
    )
    (next s)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'nodes', () => {
                    return nodes;
                });

                h.use(async (req, resp, next) => {
                    if (req.serviceId === 'callbackSrv' && req.fnName === 'c') {
                        const callParams = {
                            ...req.particleContext,
                            tetraplets: {
                                arg0: req.tetraplets[0],
                            },
                        };
                        resp.retCode = ResultCodes.success;
                        await c(req.args[0], callParams);
                        resp.result = {};
                    }
                    await next();
                });

                h.onEvent('callbackSrv', 'response', (args) => {});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for iterateAndPrintParallel');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
