/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.4-SNAPSHOT
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';


// Services

// Functions
 

export function iterateAndPrint(
    strings: string[],
    config?: {ttl?: number}
): Promise<void>;

export function iterateAndPrint(
    peer: FluencePeer,
    strings: string[],
    config?: {ttl?: number}
): Promise<void>;

export function iterateAndPrint(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "strings") [] strings)
                      )
                      (fold strings s-0
                       (seq
                        (call %init_peer_id% ("println-service-id" "print") [s-0])
                        (next s-0)
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "iterateAndPrint",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "strings" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function iterateAndPrintParallel(
    nodes: string[],
    c: (arg0: { air_version: string; external_addresses: string[]; node_version: string; }, callParams: CallParams<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<void>;

export function iterateAndPrintParallel(
    peer: FluencePeer,
    nodes: string[],
    c: (arg0: { air_version: string; external_addresses: string[]; node_version: string; }, callParams: CallParams<'arg0'>) => void | Promise<void>,
    config?: {ttl?: number}
): Promise<void>;

export function iterateAndPrintParallel(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "nodes") [] nodes)
                      )
                      (par
                       (fold nodes s-0
                        (par
                         (seq
                          (call -relay- ("op" "noop") [])
                          (xor
                           (seq
                            (seq
                             (call s-0 ("peer" "identify") [] ads)
                             (call -relay- ("op" "noop") [])
                            )
                            (xor
                             (seq
                              (call %init_peer_id% ("callbackSrv" "c") [ads])
                              (call -relay- ("op" "noop") [])
                             )
                             (seq
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              (call -relay- ("op" "noop") [])
                             )
                            )
                           )
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                           )
                          )
                         )
                         (next s-0)
                        )
                       )
                       (null)
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "iterateAndPrintParallel",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "nodes" : {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                "c" : {
                    "tag" : "arrow",
                    "domain" : {
                        "tag" : "unlabeledProduct",
                        "items" : [
                            {
                                "tag" : "struct",
                                "name" : "Info",
                                "fields" : {
                                    "air_version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "external_addresses" : {
                                        "tag" : "array",
                                        "type" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    },
                                    "node_version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        ]
                    },
                    "codomain" : {
                        "tag" : "nil"
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function to_i_64(
    i: number,
    config?: {ttl?: number}
): Promise<number>;

export function to_i_64(
    peer: FluencePeer,
    i: number,
    config?: {ttl?: number}
): Promise<number>;

export function to_i_64(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "i") [] i)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [i])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "to_i_64",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "i" : {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "i64"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function forBug499(
    config?: {ttl?: number}
): Promise<number[]>;

export function forBug499(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<number[]>;

export function forBug499(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $numbers
                        (seq
                         (seq
                          (new $array-inline
                           (seq
                            (ap "" $array-inline)
                            (call %init_peer_id% ("op" "identity") [$array-inline] array-inline-0)
                           )
                          )
                          (fold array-inline-0 i-0
                           (seq
                            (ap 5 $numbers)
                            (next i-0)
                           )
                          )
                         )
                         (call %init_peer_id% ("op" "identity") [$numbers] numbers-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [numbers-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "forBug499",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "i64"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
