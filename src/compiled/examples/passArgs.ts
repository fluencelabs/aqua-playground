/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-SNAPSHOT
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services

 export interface AquaDHTDef {
     put_host_value: (key: string, value: string, service_id: string[], callParams: CallParams<'key' | 'value' | 'service_id'>) => Promise<string> | string;
 }

 export function registerAquaDHT(service: AquaDHTDef): void;
export function registerAquaDHT(serviceId: string, service: AquaDHTDef): void;
export function registerAquaDHT(peer: FluencePeer, service: AquaDHTDef): void;
export function registerAquaDHT(peer: FluencePeer, serviceId: string, service: AquaDHTDef): void;
 export function registerAquaDHT(...args) {
    let peer: FluencePeer;
    let serviceId;
    let service;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "test-dht"
}

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use(async (req, resp, next) => {
          if (req.serviceId !== serviceId) {
              await next();
              return;
          }
  
          
 if (req.fnName === 'put_host_value') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         key: req.tetraplets[0],value: req.tetraplets[1],service_id: req.tetraplets[2]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = await service.put_host_value(req.args[0], req.args[1], req.args[2], callParams)

 }
    
  
          await next();
      });
 }
      

// Functions

 export async function putHostValue(key: string, value: string, service_id: string | null, config?: {ttl?: number}) : Promise<string>;
 export async function putHostValue(peer: FluencePeer, key: string, value: string, service_id: string | null, config?: {ttl?: number}) : Promise<string>;
 export async function putHostValue(...args) {
     let peer: FluencePeer;
     let key;
let value;
let service_id;
     let config;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         key = args[1];
value = args[2];
service_id = args[3];
config = args[4];
     } else {
         peer = FluencePeer.default;
         key = args[0];
value = args[1];
service_id = args[2];
config = args[3];
     }
    
     let request: RequestFlow;
     const promise = new Promise<string>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "key") [] key)
     )
     (call %init_peer_id% ("getDataSrv" "value") [] value)
    )
    (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
   )
   (call %init_peer_id% ("test-dht" "put_host_value") [key value service_id] res)
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', async () => {
                    return peer.connectionInfo.connectedRelays[0] || null;
                });
                h.on('getDataSrv', 'key', async () => {return key;});
h.on('getDataSrv', 'value', async () => {return value;});
h.on('getDataSrv', 'service_id', async () => {return service_id === null ? [] : [service_id];});
                h.onEvent('callbackSrv', 'response', async (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', async (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for putHostValue');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await peer.internals.initiateFlow(request!);
    return promise;
}
      


 export async function create_client_util(service_id: string, config?: {ttl?: number}) : Promise<string>;
 export async function create_client_util(peer: FluencePeer, service_id: string, config?: {ttl?: number}) : Promise<string>;
 export async function create_client_util(...args) {
     let peer: FluencePeer;
     let service_id;
     let config;
     if (args[0] instanceof FluencePeer) {
         peer = args[0];
         service_id = args[1];
config = args[2];
     } else {
         peer = FluencePeer.default;
         service_id = args[0];
config = args[1];
     }
    
     let request: RequestFlow;
     const promise = new Promise<string>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
   )
   (call %init_peer_id% ("test-dht" "put_host_value") ["client-util" service_id []] res)
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', async () => {
                    return peer.connectionInfo.connectedRelays[0] || null;
                });
                h.on('getDataSrv', 'service_id', async () => {return service_id;});
                h.onEvent('callbackSrv', 'response', async (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', async (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for create_client_util');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await peer.internals.initiateFlow(request!);
    return promise;
}
      
