/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.2.0-SNAPSHOT
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';

// Services

// Functions

export async function getPeerExternalAddresses(otherNodePeerId: string, config?: { ttl?: number }): Promise<string[]>;
export async function getPeerExternalAddresses(
    peer: FluencePeer,
    otherNodePeerId: string,
    config?: { ttl?: number },
): Promise<string[]>;
export async function getPeerExternalAddresses(...args) {
    let peer: FluencePeer;
    let otherNodePeerId;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        otherNodePeerId = args[1];
        config = args[2];
    } else {
        peer = FluencePeer.default;
        otherNodePeerId = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "otherNodePeerId") [] otherNodePeerId)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (call otherNodePeerId ("peer" "identify") [] res)
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res.$.external_addresses!])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', async () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'otherNodePeerId', async () => {
                    return otherNodePeerId;
                });
                h.onEvent('callbackSrv', 'response', async (args) => {
                    const [res] = args;
                    resolve(res);
                });

                h.onEvent('errorHandlingSrv', 'error', async (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getPeerExternalAddresses');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return promise;
}

export async function getDistantAddresses(
    target: string,
    viaNode: string,
    config?: { ttl?: number },
): Promise<string[]>;
export async function getDistantAddresses(
    peer: FluencePeer,
    target: string,
    viaNode: string,
    config?: { ttl?: number },
): Promise<string[]>;
export async function getDistantAddresses(...args) {
    let peer: FluencePeer;
    let target;
    let viaNode;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        target = args[1];
        viaNode = args[2];
        config = args[3];
    } else {
        peer = FluencePeer.default;
        target = args[0];
        viaNode = args[1];
        config = args[2];
    }

    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
         (call %init_peer_id% ("getDataSrv" "target") [] target)
        )
        (call %init_peer_id% ("getDataSrv" "viaNode") [] viaNode)
       )
       (call -relay- ("op" "noop") [])
      )
      (call viaNode ("op" "noop") [])
     )
     (xor
      (call target ("peer" "identify") [] res)
      (seq
       (seq
        (seq
         (call viaNode ("op" "noop") [])
         (call -relay- ("op" "noop") [])
        )
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
       )
       (call -relay- ("op" "noop") [])
      )
     )
    )
    (call viaNode ("op" "noop") [])
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res.$.external_addresses!])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', async () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'target', async () => {
                    return target;
                });
                h.on('getDataSrv', 'viaNode', async () => {
                    return viaNode;
                });
                h.onEvent('callbackSrv', 'response', async (args) => {
                    const [res] = args;
                    resolve(res);
                });

                h.onEvent('errorHandlingSrv', 'error', async (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getDistantAddresses');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return promise;
}
