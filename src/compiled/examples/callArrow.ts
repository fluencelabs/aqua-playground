/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.2.0-SNAPSHOT
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';

// Services

// Functions

export async function print(str: string, config?: { ttl?: number }): Promise<void>;
export async function print(peer: FluencePeer, str: string, config?: { ttl?: number }): Promise<void>;
export async function print(...args) {
    let peer: FluencePeer;
    let str;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        str = args[1];
        config = args[2];
    } else {
        peer = FluencePeer.default;
        str = args[0];
        config = args[1];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "str") [] str)
  )
  (call %init_peer_id% ("println-service-id" "print") [str])
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'str', () => {
                    return str;
                });
                h.onEvent('callbackSrv', 'response', (args) => {});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for print');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}

export async function passFunctionAsArg(
    node: string,
    str: string,
    c: (arg0: string, callParams: CallParams<'arg0'>) => string,
    config?: { ttl?: number },
): Promise<void>;
export async function passFunctionAsArg(
    peer: FluencePeer,
    node: string,
    str: string,
    c: (arg0: string, callParams: CallParams<'arg0'>) => string,
    config?: { ttl?: number },
): Promise<void>;
export async function passFunctionAsArg(...args) {
    let peer: FluencePeer;
    let node;
    let str;
    let c;
    let config;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
        node = args[1];
        str = args[2];
        c = args[3];
        config = args[4];
    } else {
        peer = FluencePeer.default;
        node = args[0];
        str = args[1];
        c = args[2];
        config = args[3];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
       (call %init_peer_id% ("getDataSrv" "node") [] node)
      )
      (call %init_peer_id% ("getDataSrv" "str") [] str)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (seq
       (seq
        (seq
         (call node ("peer" "identify") [])
         (call -relay- ("op" "noop") [])
        )
        (xor
         (call %init_peer_id% ("callbackSrv" "c") [str] init_call_res0)
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
        )
       )
       (call -relay- ("op" "noop") [])
      )
      (call node ("peer" "identify") [])
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (call %init_peer_id% ("println-service-id" "print") [init_call_res0])
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.connectionInfo.connectedRelays[0];
                });
                h.on('getDataSrv', 'node', () => {
                    return node;
                });
                h.on('getDataSrv', 'str', () => {
                    return str;
                });

                h.use((req, resp, next) => {
                    if (req.serviceId === 'callbackSrv' && req.fnaAme === 'c') {
                        const callParams = {
                            ...req.particleContext,
                            tetraplets: {
                                arg0: req.tetraplets[0],
                            },
                        };
                        resp.retCode = ResultCodes.success;
                        resp.result = c(req.args[0], callParams);
                    }
                    next();
                });

                h.onEvent('callbackSrv', 'response', (args) => {});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for passFunctionAsArg');
            });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    await peer.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
