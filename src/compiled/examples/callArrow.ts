/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.1-231
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';

function missingFields(obj: any, fields: string[]): string[] {
    return fields.filter((f) => !(f in obj));
}

// Services

// Functions

export function passFunctionAsArg(
    node: string,
    str: string,
    c: (arg0: string, callParams: CallParams<'arg0'>) => string,
    config?: { ttl?: number },
): Promise<void>;
export function passFunctionAsArg(
    peer: FluencePeer,
    node: string,
    str: string,
    c: (arg0: string, callParams: CallParams<'arg0'>) => string,
    config?: { ttl?: number },
): Promise<void>;
export function passFunctionAsArg(...args: any) {
    let peer: FluencePeer;
    let node: any;
    let str: any;
    let c: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node = args[1];
        str = args[2];
        c = args[3];
        config = args[4];
    } else {
        peer = Fluence.getPeer();
        node = args[0];
        str = args[1];
        c = args[2];
        config = args[3];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "str") [] str)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (seq
                           (seq
                            (seq
                             (call node ("peer" "identify") [])
                             (call -relay- ("op" "noop") [])
                            )
                            (xor
                             (call %init_peer_id% ("callbackSrv" "c") [str] init_call_res0)
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (call node ("peer" "identify") [])
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (call %init_peer_id% ("println-service-id" "print") [init_call_res0])
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
                `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'node', () => {
                    return node;
                });
                h.on('getDataSrv', 'str', () => {
                    return str;
                });
                h.use((req, resp, next) => {
                    if (req.serviceId === 'callbackSrv' && req.fnName === 'c') {
                        const callParams = {
                            ...req.particleContext,
                            tetraplets: {
                                arg0: req.tetraplets[0],
                            },
                        };
                        resp.retCode = ResultCodes.success;
                        resp.result = c(req.args[0], callParams);
                    }
                    next();
                });

                h.onEvent('callbackSrv', 'response', (args) => {});
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for passFunctionAsArg');
            });

        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }

        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
